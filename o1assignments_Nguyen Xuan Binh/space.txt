package o1 (Space)

// This code is introduced in Chapters 2.6 and 2.7.

class CelestialBody(val name: String, val radius: Double, var location: Pos) {
  def diameter = this.radius * 2
  override def toString = this.name
}

class AreaInSpace(size: Int) {
  val width = size * 2
  val height = size
  val earth = new CelestialBody("The Earth", 15.9, new Pos(10,  this.height / 2))
  val moon  = new CelestialBody("The Moon",   4.3, new Pos(971, this.height / 2))
  override def toString = s"${this.width}-by-${this.height} area in space"
}

object SpaceProgram extends App {
  val space = new AreaInSpace(500)
  val emptySpacePic = rectangle(space.width, space.height, Black)
  val earthPic = circle(space.earth.radius * 2, MediumBlue)
  val moonPic  = circle(space.moon.radius  * 2, Beige)
  // Replace the question marks below with code that works.
  val gui = new View(space, "A Very Simple View of Space") {
  def makePic = {
    val earthAdded = emptySpacePic.place(earthPic, space.earth.location)
    earthAdded.place(moonPic, space.moon.location)
  }
}
   gui.start() // Should launch the view that variable "gui" refers to.
}

-----------------
Block
class Block(val size: Int, val location: Pos, val color: Color) {
  override def toString = this.color.toString + " block at " + this.location
}

val model = new Block(20, new Pos(300, 50), Gray)
val viewOfBlock = new View(model) {
  def makePic = {
    val background = rectangle(500, 500, Black)
    val blockPic = rectangle(model.size, model.size, model.color)
    background.place(blockPic, model.location)
  }
}

viewOfBlock.start()